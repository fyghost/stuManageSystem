<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- <resources mapping="/resources/**" location="/resources/" /> -->

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	 <!-- Configure to plugin JSON as request and response in method handler -->
    <beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <beans:property name="messageConverters">
            <beans:list>
                <beans:ref bean="jsonMessageConverter"/>
            </beans:list>
        </beans:property>
    </beans:bean>
     
    <!-- Configure bean to convert JSON to POJO and vice versa -->
    <beans:bean id="jsonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
    	<beans:property name="supportedMediaTypes">
    		<beans:list>
    			<beans:value>text/html;charset=UTF-8</beans:value>
    		</beans:list>
    	</beans:property>
    </beans:bean> 
	
	<context:component-scan base-package="com.cnc.spring" />
	
	<interceptors>
		<interceptor>
			<mapping path="/**"/>
			<exclude-mapping path="*.js"/>
			<beans:bean class="com.cnc.spring.interceptor.LoginInterceptor"></beans:bean>
		</interceptor>
		<beans:bean class="com.cnc.spring.interceptor.LoginInterceptor"></beans:bean>
	</interceptors>
	
	<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->    
   <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">    
       <beans:property name="defaultEncoding" value="UTF-8"/>    
       <!-- 指定所上传文件的总大小不能超过200KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->    
       <!-- 不在这里限制了,后台各自进行限制了  
       <beans:property name="maxUploadSize" value="2000000"/>   
       -->   
	</beans:bean>      
    <!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->    
   <!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->    
   <beans:bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">    
       <beans:property name="exceptionMappings">    
           <beans:props>    
               <!-- 遇到MaxUploadSizeExceededException异常时，跳转到/views/login.jsp页面 -->    
               <beans:prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">../../views/login.jsp</beans:prop>    
           </beans:props>    
       </beans:property>    
	</beans:bean>	
	
	<beans:bean id="simpleMappingExceptionResolver" class="com.cnc.spring.handler.ExceptionHandler">
        <beans:property name="exceptionMappings">
            <beans:map>
                <beans:entry key="Exception" value="generic_error"></beans:entry>
            </beans:map>
        </beans:property>
        <beans:property name="defaultErrorView" value="generic_error"/>
    </beans:bean>
</beans:beans>
